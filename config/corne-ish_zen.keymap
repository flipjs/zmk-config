/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/matrix_transform.h>

/* LAYERS */
#define QWERTY   0
#define NAVIGN   1
#define SYMBOL   2
#define NUMBER   3
#define FUNCTN   4

/* MACROS */
#define MEH  LC(LA(LSHIFT))

/ {
  chosen {
    zmk,matrix_transform = &five_column_transform;
  };

  combos {
    compatible = "zmk,combos";
  };

  behaviors {
    cm: left_control_mod {
      compatible = "zmk,behavior-hold-tap";
      label = "LEFT_CONTROL_MOD";
      #binding-cells = <2>;
      tapping-term-ms = <220>;
      quick_tap_ms = <0>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };
    sm: shift_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "SHIFT_MODS";
      #binding-cells = <2>;
      tapping-term-ms = <180>;
      quick_tap_ms = <0>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };
    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      quick_tap_ms = <0>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    qwerty_layer {
      label = "QWERTY";
      bindings = <
&kp Q        &kp W      &kp E            &kp R          &kp T          &kp Y     &kp U      &kp I           &kp O        &kp P
&kp A        &kp S      &kp D            &kp F          &kp G          &kp H     &kp J      &kp K           &kp L        &lt FUNCTN SEMI
&sm LSHIFT Z &hm LALT X &cm LCTRL C      &hm LGUI V     &cm MEH B      &cm MEH N &hm LGUI M &hm LCTRL COMMA &hm LALT DOT &sm LSHIFT SLASH
&kp CAPS     &mo NUMBER &lt SYMBOL SPACE &lt NAVIGN RET &mt LCTRL BSPC &none
      >;
    };

    navign_layer {
      label = "NAVIGN";
      bindings = <
&kp ESC   &none     &kp UP    &none         &kp LC(P) &none        &none        &none      &none      &kp DEL
&kp LG(A) &kp LEFT  &kp DOWN  &kp RIGHT     &kp TAB   &kp LEFT     &kp DOWN     &kp UP     &kp RIGHT  &kp K_MUTE
&kp LG(Z) &kp LG(X) &kp LG(C) &kp LG(V)     &kp LC(N) &kp C_VOL_DN &kp C_VOL_UP &kp C_PREV &kp C_NEXT &kp C_PP
&none     &none     &kp SPACE &kp LG(SPACE) &none     &none
      >;
    };

    symbol_layer {
      label = "SYMBOL";
      bindings = <
&kp ESC   &none     &kp UP    &none         &kp LC(P) &kp PLUS  &kp EXCL   &kp AT      &kp HASH  &kp PIPE
&kp LG(A) &kp LEFT  &kp DOWN  &kp RIGHT     &kp TAB   &kp UNDER &kp DOLLAR &kp PERCENT &kp CARET &kp DQT
&kp LG(Z) &kp LG(X) &kp LG(C) &kp LG(V)     &kp LC(N) &kp TILDE &kp AMPS   &kp STAR    &kp LPAR  &kp RPAR
&none     &none     &kp SPACE &kp LG(SPACE) &kp BSPC  &none
      >;
    };

    number_layer {
      label = "NUMBER";
      bindings = <
&kp ESC    &kp LBKT &kp LPAR  &kp RPAR &kp LC(P) &kp EQUAL &kp N1 &kp N2 &kp N3 &kp BACKSLASH
&kp LC(A)  &kp RBKT &kp LBRC  &kp RBRC &kp TAB   &kp MINUS &kp N4 &kp N5 &kp N6 &kp SQT
&kp LSHIFT &kp LALT &kp LCTRL &kp LGUI &kp LC(N) &kp GRAVE &kp N7 &kp N8 &kp N9 &kp N0
&none      &none    &kp SPACE &kp RET  &kp BSPC  &none
      >;
    };

    functn_layer {
      label = "FUNCTN";
      bindings = <
&kp PRINTSCREEN &kp F1   &kp F2  &kp F3 &kp F10 &bt BT_SEL 0 &bt BT_SEL 3 &none &none &none
&kp SCROLLLOCK  &kp F4   &kp F5  &kp F6 &kp F11 &bt BT_SEL 1 &bt BT_SEL 4 &none &none &none
&kp PAUSE_BREAK &kp F7   &kp F8  &kp F9 &kp F12 &bt BT_SEL 2 &none        &none &none &none
&none           &kp CAPS &kp INS &none  &none   &bt BT_CLR
      >;
    };
  };
};
